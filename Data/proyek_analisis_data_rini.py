# -*- coding: utf-8 -*-
"""Proyek Analisis Data Rini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uVzOtHTu6vTSDvkAQAxtGegsz8CHypvh

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Siti Chairini
- **Email:** sitichairini2003@gmail.com
- **ID Dicoding:** -

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1 : Jam Puncak dan Sepi Penyewaan Sepeda
- Pertanyaan 2 : Musim apa yang paling banyak orang menyewa sepeda?
- Pertanyaan 3 : Bagaimana perkembangan bisnis penyewaan sepeda ini dari tahun ke tahun?
- Pertanyaan 4 : Lebih banyak orang yang mendaftar sebagai anggota atau lebih suka menyewa sepeda secara sekali pakai?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

#Memuat tabel day
day_df = pd.read_csv("day.csv")
day_df.head()

#Memuat tabel hour
hour_df = pd.read_csv("hour.csv")
hour_df.head()

"""### Assessing Data"""

#Memeriksa tipe data data dari tiap kolom yang terdapat dalam hour_df dan day_df.
hour_df.info()
day_df.info()

#Mengecek keberadaan missing value di dataset hour_df
hour_df.isna().sum()

#Mengecek keberadaan missing value di dataset day_df
day_df.isna().sum()

#Memeriksa duplikasi
print("Jumlah duplikasi: ", hour_df.duplicated().sum())
print("Jumlah duplikasi: ", day_df.duplicated().sum())

#Memeriksa parameter statistik dari kolom numerik yang terdapat didalam day_df
day_df.describe()

#Memeriksa parameter statistik dari kolom numerik yang terdapat di dalam day_df
hour_df.describe()

"""### Cleaning Data

Dropping
"""

#Menghapus kolom instant dan workingday. untuk workingday menurut saya sudah diwakili oleh weekday, dan untuk instant tidak ada hubungannya
hour_df.drop(['workingday'], axis = 1, inplace= True)
day_df.drop(['workingday'], axis = 1, inplace= True)

#Ubah tipe data int menjadi category pada kolom 'season', 'mnth', 'holiday', 'weekday', 'weathersit'
columns = ['season', 'mnth', 'holiday', 'weekday', 'weathersit']

for column in columns:
    day_df[column] =  day_df[column].astype("category")
    hour_df[column] =  hour_df[column].astype("category")

#Handling tipe data dteday yang tadinya 'object' akan kita ubah menjadi 'datetime'
day_df['dteday'] = pd.to_datetime(day_df['dteday'])
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

"""Rename"""

#Ganti nama kolom agar lebih mudah dibaca di dataset day_df
day_df.rename(columns={'yr':'year','mnth':'month','weekday':'one_of_week', 'weathersit':'weather_situation', 'windspeed':'wind_speed','cnt':'count_cr','hum':'humidity'},inplace=True)

#Ganti nama kolom agar lebih mudah dibaca di dataset hour_df
hour_df.rename(columns={'yr':'year','hr':'hours','mnth':'month','weekday':'one_of_week', 'weathersit':'weather_situation','windspeed':'wind_speed','cnt':'count_cr','hum':'humidity'},inplace=True)

# Konversi isi kolom agar mudah dipahami
# Konversi season menjadi: 1:Spring, 2:Summer, 3:Fall, 4:Winter
day_df.season.replace((1,2,3,4), ('Spring','Summer','Fall','Winter'), inplace=True)
hour_df.season.replace((1,2,3,4), ('Spring','Summer','Fall','Winter'), inplace=True)

# konversi month menjadi: 1:Jan, 2:Feb, 3:Mar, 4:Apr, 5:May, 6:Jun, 7:Jul, 8:Aug, 9:Sep, 10:Oct, 11:Nov, 12:Dec
day_df.month.replace((1,2,3,4,5,6,7,8,9,10,11,12),('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), inplace=True)
hour_df.month.replace((1,2,3,4,5,6,7,8,9,10,11,12),('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'), inplace=True)

# konversi weather_situation menjadi: 1:Clear, 2:Misty, 3:Light_RainSnow 4:Heavy_RainSnow
day_df.weather_situation.replace((1,2,3,4), ('Clear','Misty','Light_rainsnow','Heavy_rainsnow'), inplace=True)
hour_df.weather_situation.replace((1,2,3,4), ('Clear','Misty','Light_rainsnow','Heavy_rainsnow'), inplace=True)

# konversi one_of_week menjadi: 0:Sun, 1:Mon, 2:Tue, 3:Wed, 4:Thu, 5:Fri, 6:Sat
day_df.one_of_week.replace((0,1,2,3,4,5,6), ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'), inplace=True)
hour_df.one_of_week.replace((0,1,2,3,4,5,6), ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'), inplace=True)

# konversi year menjadi: 0:2011, 1:2012
day_df.year.replace((0,1), ('2011','2012'), inplace=True)
hour_df.year.replace((0,1), ('2011','2012'), inplace=True)

# Menghitung Humidity
day_df['humidity'] = day_df['humidity']*100
hour_df['humidity'] = hour_df['humidity']*100

# Membuat kolom baru bernama category_days yang menunjukan isi kolom tersebut weekend atau weekdays
one_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
def get_category_days(one_of_week):
    if one_of_week in ["Saturday", "Sunday"]:
        return "weekend"
    else:
        return "weekdays"

hour_df["category_days"] = hour_df["one_of_week"].apply(get_category_days)
day_df["category_days"] = day_df["one_of_week"].apply(get_category_days)

def classify_humidity(humidity):
    if humidity < 45:
        return "Terlalu kering"
    elif humidity >= 45 and humidity < 65:
        return "Ideal"
    else:
        return "Terlalu Lembab"

hour_df["humidity_category"] = hour_df["humidity"].apply(classify_humidity)
day_df["humidity_category"] = day_df["humidity"].apply(classify_humidity)

"""## Exploratory Data Analysis (EDA)"""

#Lihat rangkuman parameter statistik dari data hour_df
hour_df.describe(include="all")

"""Dari data yang kita miliki, terlihat bahwa layanan penyewaan sepeda ini cukup populer, dengan total pelanggan mencapai 17.379 orang. Jika dilihat dari waktu penyewaan, puncak keramaian terjadi sekitar pukul 11.54 siang. Ini berarti, banyak pelanggan yang memilih untuk menyewa sepeda di sekitar waktu tersebut.

Namun, perlu diingat bahwa waktu penyewaan sepeda ini cukup bervariasi. Ada pelanggan yang menyewa di pagi hari, siang hari, sore hari, bahkan malam hari. Hal ini menunjukkan bahwa layanan ini cukup fleksibel dan dapat memenuhi kebutuhan berbagai jenis pelanggan.
"""

#Penyewaan berdasarkan jam
hour_df.groupby(by="hours").agg({
    "count_cr": ["sum"]
})

""""Berdasarkan analisis pivot table, kita dapat menyimpulkan bahwa jam sibuk bagi layanan penyewaan sepeda adalah sekitar pukul 17.00, sementara jam sepi terjadi pada pukul 04.00. Hal ini menunjukkan bahwa sebagian besar pelanggan cenderung menyewa sepeda untuk kegiatan sore hari atau malam hari."

### Explore ...
"""

#Lihat rangkuman parameter statistik dari data day_df
day_df.describe(include="all")

""""Berdasarkan data statistik, total pelanggan yang tercatat pada musim 1 hingga 4 mencapai 17.379 orang."
"""

#Lihat jumlah penyewaan tiap season
day_df.groupby(by="season").count_cr.sum().sort_values(ascending=False).reset_index().head(10)

""""Analisis data menunjukkan bahwa musim gugur dan musim panas merupakan periode dengan tingkat penggunaan layanan yang paling tinggi dibandingkan musim lainnya."
"""

#Lihat jumlah penyewaan tiap tahun berdasarkan registered dan casul
day_df.groupby(by="year").agg({
    "registered": ["sum"],
    "casual": ["sum"]
})

"""Tentu, mari kita coba parafrasekan kalimat-kalimat tersebut dengan beberapa pilihan yang berbeda:

Untuk kalimat pertama:

Pilihan 1 (lebih formal): "Data menunjukkan perbedaan yang signifikan antara jumlah anggota dan non-anggota, dengan anggota yang terdaftar sejak tahun 2011 mencapai angka 995.851 orang, jauh lebih tinggi dibandingkan dengan non-anggota yang berjumlah 247.252 orang."
Pilihan 2 (lebih sederhana): "Jumlah orang yang sudah menjadi anggota (995.851 orang) jauh lebih banyak dibandingkan dengan mereka yang belum menjadi anggota (247.252 orang) sejak tahun 2011."
Pilihan 3 (lebih menekankan pada perbedaan): "Terdapat kesenjangan yang cukup besar antara jumlah anggota dan non-anggota, dengan anggota memiliki jumlah yang hampir empat kali lipat dari non-anggota."
Untuk kalimat kedua:

Pilihan 1 (lebih formal): "Berdasarkan visualisasi data, terlihat jelas bahwa minat masyarakat untuk menyewa sepeda pada hari libur nasional (tanggal merah) cenderung lebih rendah dibandingkan dengan hari biasa."
Pilihan 2 (lebih sederhana): "Orang-orang kurang tertarik untuk menyewa sepeda pada hari libur dibandingkan hari kerja biasa."
Pilihan 3 (lebih deskriptif): "Grafik menunjukkan penurunan yang signifikan pada jumlah penyewaan sepeda saat tanggal merah, mengindikasikan bahwa faktor hari libur mempengaruhi minat masyarakat untuk bersepeda."
Parafrase gabungan:

"Analisis data mengungkapkan bahwa program keanggotaan sangat efektif dalam menarik pelanggan, dengan jumlah anggota yang jauh melampaui non-anggota. Di sisi lain, data juga menunjukkan bahwa hari libur nasional cenderung mengurangi minat masyarakat untuk menyewa sepeda."
Pilihan parafrase yang paling tepat akan tergantung pada:

Konteks: Di mana kalimat ini akan digunakan? Dalam laporan formal, presentasi, atau tulisan santai?
Audiens: Siapa yang akan membaca kalimat ini? Apakah mereka awam atau sudah familiar dengan istilah statistik?
Tujuan: Apa tujuan utama dari kalimat ini? Ingin menyoroti perbedaan, memberikan informasi, atau mengajak audiens untuk mengambil tindakan?
Tips tambahan:

Gunakan visualisasi: Jika memungkinkan, sertakan grafik atau diagram untuk memperjelas data.
Berikan konteks: Jelaskan mengapa perbedaan atau tren tersebut terjadi (misalnya, anggota mungkin mendapatkan diskon atau manfaat lain).
Kuantifikasi: Jika memungkinkan, gunakan angka atau persentase untuk memperkuat argumen Anda.
Contoh penggunaan dalam kalimat yang lebih lengkap:

"Dengan jumlah anggota yang mencapai 995.851 orang pada tahun 2011, program keanggotaan terbukti sangat sukses dalam mempertahankan pelanggan setia. Namun, data juga menunjukkan fluktuasi dalam permintaan, dengan penurunan yang signifikan pada hari libur nasional. Hal ini mengindikasikan bahwa faktor-faktor seperti hari kerja dan hari libur memiliki pengaruh yang cukup besar terhadap perilaku penyewaan sepeda."

## Visualization & Explanatory Analysis

### Pertanyaan 1: Jam Puncak dan Sepi Penyewaan Sepeda
"""

#grouping terhadap hours dan count_cr
sum_order_items_df = hour_df.groupby("hours").count_cr.sum().sort_values(ascending=False).reset_index()

# membuat bar chart untuk melihat perbedaan penyewaan sepeda berdasarkan jam
fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(35, 15))

# membuat barplot untuk penyewa sepeda terbanyak
sns.barplot(x="hours", y="count_cr", data=sum_order_items_df.head(5), palette=["#D3D3D3", "#D3D3D3", "#90CAF9", "#D3D3D3", "#D3D3D3"], ax=ax[0])

# mengatur label dan judul untuk subplot pertama
ax[0].set_ylabel(None)
ax[0].set_xlabel("Hours (PM)", fontsize=30)
ax[0].set_title("Jam dengan banyak penyewa sepeda", loc="center", fontsize=30)
ax[0].tick_params(axis='y', labelsize=35)
ax[0].tick_params(axis='x', labelsize=30)

# membuat barplot untuk penyewa sepeda terdikit
sns.barplot(x="hours", y="count_cr", data=sum_order_items_df.sort_values(by="hours", ascending=True).head(5), palette=["#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3","#90CAF9"], ax=ax[1])

# mengatur label dan judul untuk subplot pertama
ax[1].set_ylabel(None)
ax[1].set_xlabel("Hours (AM)",  fontsize=30)
ax[1].set_title("Jam dengan sedikit penyewa sepeda", loc="center", fontsize=30)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].tick_params(axis='y', labelsize=35)
ax[1].tick_params(axis='x', labelsize=30)

# menampilkan plot
plt.show()

""""Ternyata, pengguna sepeda paling sering menyewa sepeda pada sore hari sekitar pukul 5 (17:00) dengan jumlah mencapai ratusan ribu kali. Di sisi lain, dini hari pukul 4 (04:00) menjadi waktu yang paling jarang dipilih untuk menyewa sepeda, dengan jumlah yang jauh lebih sedikit."

### Pertanyaan 2: Musim apa yang paling banyak orang menyewa sepeda?
"""

# mengatur warna
colors = ["#D3D3D3", "#D3D3D3", "#90CAF9", "#D3D3D3"]

# membuat subplot dengan 1 baris dan 1 kolom, dengan ukuran (20, 10)
fig, ax = plt.subplots(figsize=(20, 10))

# Buat barplot untuk y="count_cr" dan x="season", menggunakan data=day_df
sns.barplot(
        y="count_cr",
        x="season",
        data=day_df.sort_values(by="season", ascending=False),
        palette=colors,
        ax=ax
    )
# mengatur judul, label y dan x, serta tick params untuk subplot tersebut
ax.set_title("Grafik Antar Musim", loc="center", fontsize=50)
ax.set_ylabel(None)
ax.set_xlabel(None)
ax.tick_params(axis='x', labelsize=35)
ax.tick_params(axis='y', labelsize=30)

# menampilkan plot
plt.show()

""""Berdasarkan data, musim gugur menjadi periode dengan tingkat permintaan terhadap layanan penyewaan sepeda yang tertinggi, dengan total 1.061.129 penyewaan."

### Pertanyaan 3: Bagaimana perkembangan bisnis penyewaan sepeda ini dari tahun ke tahun?
"""

# membuat figure dengan ukuran (24, 5)
plt.figure(figsize=(24, 5))

# menghitung jumlah pelanggan maksimum per bulan
monthly_counts = day_df['count_cr'].groupby(day_df['dteday']).max()

# membuat scatter plot untuk jumlah pelanggan maksimum per bulan, dengan warna biru dan marker 'o'
plt.scatter(monthly_counts.index, monthly_counts.values, c="#90CAF9", s=10, marker='o')

# membuat line plot untuk jumlah pelanggan maksimum per bulan
plt.plot(monthly_counts.index, monthly_counts.values)

# penamaan untuk sumbu x
plt.xlabel('Bulan')

# penamaan untuk sumbu y
plt.ylabel('Jumlah')

# buat judul
plt.title('Grafik Jumlah Pelanggan per Bulan pada Tahun 2012')

# menampilkan plot
plt.show()

""""Analisis visualisasi data menunjukkan bahwa puncak permintaan terjadi pada bulan September. Selanjutnya, terdapat tren penurunan yang signifikan pada jumlah pesanan mulai dari bulan November hingga Desember."

## Analisis Lanjutan (Opsional)

1. Analisis Clustering

Total Pengguna Berdasarkan weather_situation
"""

hour_df.groupby(by="weather_situation").count_cr.nunique().sort_values(ascending=False)

"""Total Pengguna Berdasarkan Humidity"""

hour_df.groupby(by="humidity_category").agg({
    "count_cr": ["count"]})

"""2. RFM Analysis
Analisis RFM adalah sebuah alat yang sangat berguna untuk memahami pelanggan. Dengan menganalisis tiga faktor utama yaitu Recency (kebaruan transaksi), Frequency (frekuensi transaksi), dan Monetary (nilai transaksi), kita bisa membuat kelompok-kelompok pelanggan yang berbeda.
"""

current_date = max(hour_df['dteday'])
rfm_df = hour_df.groupby('registered').agg({
    'dteday': lambda x: (current_date - x.max()).days,  # Recency
    'instant': 'count',  # Frequency
    'count_cr': 'sum'  # Monetary
}).reset_index()

# Mengganti nama kolom
rfm_df.columns = ['registered', 'Recency', 'Frequency', 'Monetary']

print(rfm_df.head())

"""## Conclusion

- Conclution Pertanyaan 1: Jam Puncak dan Sepi Penyewaan Sepeda : Analisis data menunjukkan bahwa aktivitas penyewaan sepeda mencapai puncaknya pada sore hari pukul 17.00. Di sisi lain, dini hari pukul 04.00 menjadi periode dengan aktivitas penyewaan yang paling minim.
- Conclution pertanyaan 2 Musim Tersibuk untuk Menyewa Sepeda: Musim gugur menjadi periode dengan tingkat penyewaan sepeda tertinggi dibandingkan musim lainnya.
-Conclution pertanyaan 3  Perkembangan Bisnis Penyewaan Sepeda dari Tahun ke Tahun: Grafik menunjukkan fluktuasi yang cukup signifikan dalam jumlah pesanan sepeda dari tahun ke tahun, dengan puncak tertinggi terjadi pada bulan September 2012 dan penurunan terendah pada bulan Januari 2011.

"Berdasarkan analisis data, pola penyewaan sepeda menunjukkan tren yang menarik. Puncak penyewaan terjadi pada pukul 17.00, sementara dini hari pukul 04.00 merupakan waktu dengan permintaan paling rendah. Musim gugur menjadi musim favorit bagi para pengguna sepeda. Dari segi perkembangan bisnis, bulan September 2012 mencatat rekor jumlah pesanan tertinggi, namun terjadi penurunan yang cukup signifikan pada bulan Januari 2011. Fluktuasi ini kemungkinan dipengaruhi oleh berbagai faktor seperti cuaca, musim liburan, dan event-event khusus."
"""